# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.29.0
# source: query.sql
import dataclasses
import datetime
import decimal
from typing import Iterator, Optional

import sqlalchemy

from backend.sqlc.gen import models


CREATE_MEASUREMENT = """-- name: create_measurement \\:one
INSERT INTO measurements (
    temperature,
    humidity,
    pressure,
    gas_resistance,
    timestamp
) VALUES (
    :p1, :p2, :p3, :p4, :p5
)
RETURNING measurements_id, temperature, humidity, pressure, gas_resistance, timestamp
"""


@dataclasses.dataclass()
class CreateMeasurementParams:
    temperature: Optional[decimal.Decimal]
    humidity: Optional[decimal.Decimal]
    pressure: Optional[decimal.Decimal]
    gas_resistance: Optional[decimal.Decimal]
    timestamp: Optional[datetime.datetime]


DELETE_MEASUREMENTS_BY_TIME = """-- name: delete_measurements_by_time \\:many
SELECT measurements_id, temperature, humidity, pressure, gas_resistance, timestamp FROM measurements
WHERE timestamp <= :p1
"""


GET_MEASUREMENT = """-- name: get_measurement \\:one
SELECT measurements_id, temperature, humidity, pressure, gas_resistance, timestamp FROM measurements
WHERE measurements_id = :p1 LIMIT 1
"""


LIST_MEASUREMENTS = """-- name: list_measurements \\:many
SELECT measurements_id, temperature, humidity, pressure, gas_resistance, timestamp FROM measurements
ORDER BY timestamp DESC
"""


LIST_MEASUREMENTS_BY_TIME = """-- name: list_measurements_by_time \\:many

SELECT measurements_id, temperature, humidity, pressure, gas_resistance, timestamp FROM measurements
WHERE timestamp >= :p1 AND timestamp <= :p2
ORDER BY timestamp ASC
"""


class Querier:
    def __init__(self, conn: sqlalchemy.engine.Connection):
        self._conn = conn

    def create_measurement(self, arg: CreateMeasurementParams) -> Optional[models.Measurement]:
        row = self._conn.execute(sqlalchemy.text(CREATE_MEASUREMENT), {
            "p1": arg.temperature,
            "p2": arg.humidity,
            "p3": arg.pressure,
            "p4": arg.gas_resistance,
            "p5": arg.timestamp,
        }).first()
        if row is None:
            return None
        return models.Measurement(
            measurements_id=row[0],
            temperature=row[1],
            humidity=row[2],
            pressure=row[3],
            gas_resistance=row[4],
            timestamp=row[5],
        )

    def delete_measurements_by_time(self, *, timestamp: Optional[datetime.datetime]) -> Iterator[models.Measurement]:
        result = self._conn.execute(sqlalchemy.text(DELETE_MEASUREMENTS_BY_TIME), {"p1": timestamp})
        for row in result:
            yield models.Measurement(
                measurements_id=row[0],
                temperature=row[1],
                humidity=row[2],
                pressure=row[3],
                gas_resistance=row[4],
                timestamp=row[5],
            )

    def get_measurement(self, *, measurements_id: Optional[int]) -> Optional[models.Measurement]:
        row = self._conn.execute(sqlalchemy.text(GET_MEASUREMENT), {"p1": measurements_id}).first()
        if row is None:
            return None
        return models.Measurement(
            measurements_id=row[0],
            temperature=row[1],
            humidity=row[2],
            pressure=row[3],
            gas_resistance=row[4],
            timestamp=row[5],
        )

    def list_measurements(self) -> Iterator[models.Measurement]:
        result = self._conn.execute(sqlalchemy.text(LIST_MEASUREMENTS))
        for row in result:
            yield models.Measurement(
                measurements_id=row[0],
                temperature=row[1],
                humidity=row[2],
                pressure=row[3],
                gas_resistance=row[4],
                timestamp=row[5],
            )

    def list_measurements_by_time(self, *, timestamp: Optional[datetime.datetime]) -> Iterator[models.Measurement]:
        result = self._conn.execute(sqlalchemy.text(LIST_MEASUREMENTS_BY_TIME), {"p1": timestamp, "p2": timestamp})
        for row in result:
            yield models.Measurement(
                measurements_id=row[0],
                temperature=row[1],
                humidity=row[2],
                pressure=row[3],
                gas_resistance=row[4],
                timestamp=row[5],
            )
